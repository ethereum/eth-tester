from typing import (
    List,
)

from eth_typing import (
    HexStr,
)
from eth_utils.curried import (
    to_checksum_address,
)
from pydantic import (
    BaseModel,
    Field,
    field_validator,
)

from eth_tester.validation.common import (
    validate_bytes,
)
from eth_tester.validation.outbound import (
    validate_canonical_address,
)


def _validate_address(value: bytes) -> bytes:
    """
    Validate that the given value is a valid Ethereum address.
    """
    validate_bytes(value)
    validate_canonical_address(value)
    return value


class Account(BaseModel):
    """
    An account is a representation of an Ethereum account.
    It contains information about the account, such as its address and balance.
    """

    # The address of the account
    address: bytes

    @field_validator("address")
    @classmethod
    def validate_address(cls, value: bytes) -> HexStr:
        """
        Validate that the given value is a valid Ethereum address.
        """
        return to_checksum_address(_validate_address(value))


class LogEntry(BaseModel):
    """
    A log entry is a record of an event emitted by a contract.
    It contains information about the event, such as its address, topics, and data.
    """

    # The address of the contract that emitted the event
    address: str = Field(default="", description="Address of the contract")

    # The topics of the event
    topics: List[str] = Field(default_factory=list, description="Topics of the event")

    # The data of the event
    data: str = Field(default="", description="Data of the event")


class Receipt(BaseModel):
    """
    A receipt is a record of the execution of a transaction.
    It contains information about the transaction, such as its status, gas used, and logs generated.
    """

    # The status of the transaction (1 for success, 0 for failure)
    status: int = Field(
        default=1, description="Transaction status: 1 for success, 0 for failure"
    )

    # The cumulative gas used by the transaction
    cumulative_gas_used: int = Field(
        default=0, description="Cumulative gas used by the transaction"
    )

    # The gas used by the transaction
    gas_used: int = Field(default=0, description="Gas used by the transaction")

    # The logs generated by the transaction
    logs: List[LogEntry] = Field(
        default_factory=List, description="Logs generated by the transaction"
    )
